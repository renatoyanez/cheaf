import { db } from "./firebase";
import {
  doc,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  collection,
  query,
  where,
  setDoc
} from "firebase/firestore";
import { Package } from "../types/package";

export const createInternalPackageIfNeeded = async (
  userId: string,
  userEmail: string
) => {
  const q = query(
    collection(db, "users", userId, "packages"),
    // where("userId", "==", userId),
    where("isInternal", "==", true),
    where("autoGenerated", "==", true)
  );

  const snapshot = await getDocs(q);

  if (snapshot.empty) {
    const specialProducts = await fetch(
      "https://dummyjson.com/products/category/sports-accessories?limit=2"
    )
      .then((res) => res.json())
      .then((data) => data.products)
      .catch((err) => {
        console.log(err.message);
        throw err;
      });

    const ref = collection(db, "users", userId, "packages");

    await addDoc(ref, {
      email: userEmail,
      packageName: "Special Package",
      isInternal: true,
      autoGenerated: true,
      products: specialProducts,
    });
  }
};

export const dbLoadPackages = async (userId: string) => {
  const ref = collection(db, "users", userId, "packages");
  const snapshot = await getDocs(ref);
  const result = snapshot.docs.map((doc) => ({
    packageId: doc.id,
    ...doc.data(),
  })) as Package[];
  return result;
};

export const dbAddPackage = async (
  newPackage: Omit<Package, "packageId">,
  userId: string,
  packages: Package[]
) => {
  const ref = collection(db, "users", userId, "packages");

  // Generate a Firestore ID manually (same as Firestore would auto-generate)
  const id = doc(ref).id;

  const packageName = newPackage.packageName?.length
    ? newPackage.packageName
    : `Unnamed package ${packages.length}`;

  const fullPackage = {
    ...newPackage,
    packageId: id,     // ðŸ”¥ Now stored inside the doc too
    packageName,
  };

  const docRef = doc(db, "users", userId, "packages", id);
  await setDoc(docRef, fullPackage);

  return fullPackage;
};

export const dbUpdatePackage = async (
  userId: string,
  packageId: string,
  updates: Partial<Package>
): Promise<void> => {
  const ref = doc(db, "users", userId, "packages", packageId);
  await updateDoc(ref, updates);
};

export const dbDeletePackage = async (
  userId: string,
  packageId: string
): Promise<void> => {
  const ref = doc(db, "users", userId, "packages", packageId);
  await deleteDoc(ref);
};
